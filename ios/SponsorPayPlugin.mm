#import "SponsorPayPlugin.h"
#include "iosVersioning.h"

@implementation SponsorPayPlugin

	NSString *sponsorPayAppID = nil;
	NSString *sponsorPaySecurityToken = nil;
	bool videoAdCached = false;

// The plugin must call super dealloc.
- (void) dealloc {
	self.appDelegate = nil;
	[super dealloc];
}

// The plugin must call super init.
- (id) init {
	self = [super init];
	if (!self) {
		return nil;
	}

	self.appDelegate = nil;
	/* self.interstitialClient = nil; */
	self.videoClient = nil;

	return self;
}

- (void) initializeWithManifest:(NSDictionary *)manifest appDelegate:(TeaLeafAppDelegate *)appDelegate {
	self.appDelegate = appDelegate;

	@try {
		NSDictionary *ios = [manifest valueForKey:@"ios"];
		sponsorPayAppID = [ios valueForKey:@"sponsorPayAppID"];
		sponsorPaySecurityToken = [ios valueForKey:@"sponsorPaySecurityToken"];
	}
	@catch (NSException *exception) {
		NSLog(@"{sponsorPay} Failure to get ios:sponsorPay keys from manifest");
	}

	if (sponsorPayAppID != nil && sponsorPaySecurityToken != nil) {
		// sponsorPay requires the app to accept cookies
		NSLog(@"{sponsorPay} explicitly setting always accept cookies");
		[NSHTTPCookieStorage sharedHTTPCookieStorage].cookieAcceptPolicy = NSHTTPCookieAcceptPolicyAlways;
	} else {
		NSLog(@"{sponsorPay} Failed to initialize sponsorpay");
	}
}

- (void) initializeSponsorPay:(NSDictionary *)jsonObject {

	NSString *userId = nil;
	@try {
		userId = [jsonObject valueForKey:@"userId"];
	}
	@catch (NSException *exception) {
	}

	if (userId == nil) {
		NSLog(@"{sponsorPay} Initializing with sponsorPayAppID: '%@' and sponsorPaySecurityToken: '%@'",
		  sponsorPayAppID, sponsorPaySecurityToken);
		[SponsorPaySDK startWithAutogeneratedUserForAppId: sponsorPayAppID
			securityToken: sponsorPaySecurityToken];
	} else {
		NSLog(@"{sponsorPay} Initializing with sponsorPayAppID: '%@', sponsorPaySecurityToken: '%@', and userId: '%@'",
		  sponsorPayAppID, sponsorPaySecurityToken, userId);
		[SponsorPaySDK
			startForAppId: sponsorPayAppID
			userId: userId
			securityToken: sponsorPaySecurityToken];
	}

	[[PluginManager get] dispatchJSEvent:@{
		@"name": @"Initialized"
	}];

};

/* - (void)interstitialClient:(SPInterstitialClient *)client */
/*    canShowInterstitial:(BOOL)canShowInterstitial */
/* { */
/* 	// Assuming that this is a subclass of UIViewController */
/* 	// and that we want to show an interstitial immediately */
/* 	if (canShowInterstitial) { */
/* 		[client showInterstitialFromViewController:self.appDelegate.tealeafViewController]; */
/* 		[[PluginManager get] dispatchJSEvent:@{ */
/* 			@"name": @"InterstitialAvailable" */
/* 		}]; */
/* 	} else { */
/* 		// maybe try later */
/* 		[[PluginManager get] dispatchJSEvent:@{ */
/* 			@"name": @"InterstitialNotAvailable" */
/* 		}]; */
/* 	} */
/* } */

/* - (void)interstitialClientDidShowInterstitial:(SPInterstitialClient *)client */
/* { */
/* 	NSLog(@"An interstitial ad is being shown right now"); */
/* } */

/* - (void)interstitialClient:(SPInterstitialClient *)client */
/* didDismissInterstitialWithReason:(SPInterstitialDismissReason)dismissReason */
/* { */
/* 	NSString *reasonDescription = nil; */
/* 	switch (dismissReason) { */

/* 		case SPInterstitialDismissReasonUserClickedOnAd: */
/* 		reasonDescription = @"because the user clicked on it"; */
/* 		break; */

/* 		case SPInterstitialDismissReasonUserClosedAd: */
/* 		reasonDescription = @"because the user explicitly closed it"; */
/* 		break; */

/* 		case SPInterstitialDismissReasonUnknown: */
/* 		reasonDescription = @"for an unknown reason (either click or explicit dismiss)"; */
/* 		break; */
/* 	} */

/* 	NSLog(@"{sponsorPay} interstitial ad was dismissed %@", reasonDescription); */

/* 	[[PluginManager get] dispatchJSEvent:@{ */
/* 		@"name": @"InterstitialCompleted", */
/* 		@"success": @true */
/* 	}]; */
/* } */

/* - (void)interstitialClient:(SPInterstitialClient *)client */
/* 	  didFailWithError:(NSError *)error */
/* { */
/* 	NSLog(@"{sponsorPay} An error occured while requesting or showing the interstitial %@", error); */
/* 	[[PluginManager get] dispatchJSEvent:@{ */
/* 		@"name": @"InterstitialError", */
/* 		@"error": error */
/* 	}]; */
/* } */

/* - (void) canShowInterstitial:(NSDictionary *)jsonObject { */

/* 	if (self.interstitialClient == nil) { */
/* 		self.interstitialClient = [SponsorPaySDK interstitialClient]; */
/* 		self.interstitialClient.delegate = self; */
/* 	} */

/* 	@try { */
/* 		[self.interstitialClient checkInterstitialAvailable]; */
/* 	} */
/* 	@catch (NSException *exception) { */
/* 		NSLog(@"{sponsorPay} Failure requesting interstitial: %@", exception); */
/* 	} */
/* } */

/* - (void) showInterstitial:(NSDictionary *)jsonObject { */
/* 	@try { */
/* 		NSLog(@"{sponsorPay} showing interstitial"); */
/* 		[self.interstitialClient showInterstitialFromViewController:self.appDelegate.tealeafViewController]; */
/* 	} */
/* 	@catch (NSException *exception) { */
/* 		NSLog(@"{sponsorPay} Failure during interstitial: %@", exception); */
/* 	} */
/* } */

- (void) checkVideoAvailable:(NSDictionary *)jsonObject {
	self.videoClient = [SponsorPaySDK requestBrandEngageOffersNotifyingDelegate:self];
}

- (void) showVideo:(NSDictionary *)jsonObject {
	NSLog(@"{sponsorPay} Attempting to Show Video");

	if (videoAdCached) {
		videoAdCached = false;
		bool ableToShowVideo = [self.videoClient
			startWithParentViewController:self.appDelegate.tealeafViewController];
		if (!ableToShowVideo) {
			NSLog(@"{sponsorPay} Failed to show video");
			/* [[PluginManager get] dispatchJSEvent:@{ */
			/* 	@"name": @"VideoError", */
			/* }]; */
		}
	} else {
		NSLog(@"{sponsorPay} No video available. Cache a video before attempting to play one");
		[[PluginManager get] dispatchJSEvent:@{
			@"name": @"VideoError",
			@"errorMessage": @"No Video Available"
		}];
	}
}

// This is defined in your delegate class
// which conforms to the SPBrandEngageClientDelegate protocol
- (void)brandEngageClient:(SPBrandEngageClient *)brandEngageClient
	didReceiveOffers:(BOOL)areOffersAvailable {

	if (areOffersAvailable) {
		NSLog(@"{sponsorPay} Video Available");
		videoAdCached = true;
		[[PluginManager get] dispatchJSEvent:@{
			@"name": @"VideoAvailable",
		}];
	} else {
		NSLog(@"{sponsorPay} Video Not Available");
		videoAdCached = false;
		[[PluginManager get] dispatchJSEvent:@{
			@"name": @"VideoNotAvailable",
		}];
	}
}

- (void)brandEngageClient:(SPBrandEngageClient *)brandEngageClient
	didChangeStatus:(SPBrandEngageClientStatus)newStatus {

	if (newStatus == STARTED) {
		NSLog(@"{sponsorPay} Video Started");
	} else if (newStatus == CLOSE_FINISHED) {
		NSLog(@"{sponsorPay} Video Completed");
		[[PluginManager get] dispatchJSEvent:@{
			@"name": @"VideoCompleted",
			@"success": @true
		}];
	} else if (newStatus == CLOSE_ABORTED) {
		NSLog(@"{sponsorPay} Video Aborted");
		[[PluginManager get] dispatchJSEvent:@{
			@"name": @"VideoCompleted",
			@"success": @false
		}];
	} else {
		NSLog(@"{sponsorPay} Video Error");
		[[PluginManager get] dispatchJSEvent:@{
			@"name": @"VideoError",
			@"success": @false
		}];
	}
}


@end
